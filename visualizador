import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Paper,
  AppBar,
  Toolbar,
  IconButton,
  Typography,
  Drawer,
  Tabs,
  Tab,
  Tooltip,
  CircularProgress,
  useTheme,
} from '@mui/material';
import {
  ZoomIn,
  ZoomOut,
  RotateLeft,
  RotateRight,
  Fullscreen,
  Comment,
  Draw,
  Highlight,
  Print,
  Download,
  Share,
} from '@mui/icons-material';
import { Document, Page, pdfjs } from 'react-pdf';
import { useParams } from 'react-router-dom';
import api from '../../services/api';
import { DocumentAnnotations } from './DocumentAnnotations';
import { DocumentComments } from './DocumentComments';
import { DocumentVersions } from './DocumentVersions';
import { DocumentWorkflow } from './DocumentWorkflow';

// Configurar worker do PDF.js
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

interface DocumentViewerProps {
  documentId?: string;
}

export const DocumentViewer: React.FC<DocumentViewerProps> = ({ documentId: propDocumentId }) => {
  const { id: paramDocumentId } = useParams();
  const documentId = propDocumentId || paramDocumentId;
  const theme = useTheme();
  
  const [document, setDocument] = useState<any>(null);
  const [numPages, setNumPages] = useState<number>(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [scale, setScale] = useState(1);
  const [rotation, setRotation] = useState(0);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [loading, setLoading] = useState(true);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    loadDocument();
  }, [documentId]);

  const loadDocument = async () => {
    try {
      setLoading(true);
      const response = await api.get(`/documents/${documentId}`);
      setDocument(response.data);
    } catch (error) {
      console.error('Error loading document:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {
    setNumPages(numPages);
  };

  const handleZoomIn = () => {
    setScale((prev) => Math.min(prev + 0.1, 3));
  };

  const handleZoomOut = () => {
    setScale((prev) => Math.max(prev - 0.1, 0.5));
  };

  const handleRotateLeft = () => {
    setRotation((prev) => (prev - 90) % 360);
  };

  const handleRotateRight = () => {
    setRotation((prev) => (prev + 90) % 360);
  };

  const handleFullscreen = () => {
    if (containerRef.current) {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        containerRef.current.requestFullscreen();
      }
    }
  };

  const handleDownload = async () => {
    try {
      const response = await api.get(`/documents/${documentId}/download`, {
        responseType: 'blob',
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', document?.title || 'document');
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Error downloading document:', error);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box ref={containerRef} sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <AppBar position="static" color="default" elevation={1}>
        <Toolbar variant="dense">
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            {document?.title}
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Tooltip title="Zoom In">
              <IconButton onClick={handleZoomIn}>
                <ZoomIn />
              </IconButton>
            </Tooltip>
            <Tooltip title="Zoom Out">
              <IconButton onClick={handleZoomOut}>
                <ZoomOut />
              </IconButton>
            </Tooltip>
            <Tooltip title="Rotate Left">
              <IconButton onClick={handleRotateLeft}>
                <RotateLeft />
              </IconButton>
            </Tooltip>
            <Tooltip title="Rotate Right">
              <IconButton onClick={handleRotateRight}>
                <RotateRight />
              </IconButton>
            </Tooltip>
            <Tooltip title="Fullscreen">
              <IconButton onClick={handleFullscreen}>
                <Fullscreen />
              </IconButton>
            </Tooltip>
            <Tooltip title="Comments">
              <IconButton onClick={() => setSidebarOpen(true)}>
                <Comment />
              </IconButton>
            </Tooltip>
            <Tooltip title="Draw">
              <IconButton>
                <Draw />
              </IconButton>
            </Tooltip>
            <Tooltip title="Highlight">
              <IconButton>
                <Highlight />
              </IconButton>
            </Tooltip>
            <Tooltip title="Print">
              <IconButton onClick={handlePrint}>
                <Print />
              </IconButton>
            </Tooltip>
            <Tooltip title="Download">
              <IconButton onClick={handleDownload}>
                <Download />
              </IconButton>
            </Tooltip>
            <Tooltip title="Share">
              <IconButton>
                <Share />
              </IconButton>
            </Tooltip>
          </Box>
        </Toolbar>
      </AppBar>

      <Box sx={{ display: 'flex', flexGrow: 1, overflow: 'hidden' }}>
        <Paper
          sx={{
            flexGrow: 1,
            overflow: 'auto',
            bgcolor: theme.palette.grey[100],
            display: 'flex',
            justifyContent: 'center',
            p: 2,
          }}
        >
          <Document
            file={document?.file_url}
            onLoadSuccess={handleDocumentLoadSuccess}
            loading={<CircularProgress />}
          >
            <Page
              pageNumber={currentPage}
              scale={scale}
              rotate={rotation}
              renderTextLayer={true}
              renderAnnotationLayer={true}
            />
          </Document>
        </Paper>

        <Drawer
          anchor="right"
          open={sidebarOpen}
          onClose={() => setSidebarOpen(false)}
          variant="persistent"
          sx={{
            width: 320,
            flexShrink: 0,
            '& .MuiDrawer-paper': {
              width: 320,
              boxSizing: 'border-box',
            },
          }}
        >
          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
            <Tabs
              value={activeTab}
              onChange={(_, newValue) => setActiveTab(newValue)}
              variant="fullWidth"
            >
              <Tab label="Comments" />
              <Tab label="Annotations" />
              <Tab label="Versions" />
              <Tab label="Workflow" />
            </Tabs>
          </Box>

          <Box sx={{ p: 2, overflow: 'auto' }}>
            {activeTab === 0 && (
              <DocumentComments documentId={documentId!} />
            )}
            {activeTab === 1 && (
              <DocumentAnnotations documentId={documentId!} />
            )}
            {activeTab === 2 && (
              <DocumentVersions documentId={documentId!} />
            )}
            {activeTab === 3 && (
              <DocumentWorkflow documentId={documentId!} />
            )}
          </Box>
        </Drawer>
      </Box>
    </Box>
  );
};
