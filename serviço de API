import axios from 'axios';

const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',
});

api.interceptors.request.use(async (config) => {
  const token = localStorage.getItem('@App:token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Se o erro for 401 e não for uma tentativa de refresh
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Tenta renovar o token
        const response = await api.post('/auth/refresh-token', {
          refreshToken: localStorage.getItem('@App:refreshToken'),
        });

        const { token } = response.data;
        localStorage.setItem('@App:token', token);
        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;

        // Refaz a requisição original com o novo token
        return api(originalRequest);
      } catch (refreshError) {
        // Se não conseguir renovar, faz logout
        localStorage.removeItem('@App:token');
        localStorage.removeItem('@App:refreshToken');
        localStorage.removeItem('@App:user');
        window.location.href = '/login';
      }
    }

    return Promise.reject(error);
  }
);

export default api;
