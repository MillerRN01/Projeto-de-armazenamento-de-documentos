import React, { useState, useEffect } from 'react';
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  TextField,
  Box,
  Chip,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  Info as InfoIcon,
  FilterList as FilterIcon,
} from '@mui/icons-material';
import { format } from 'date-fns';
import api from '../../services/api';

interface AuditEvent {
  id: string;
  user: string;
  action: string;
  resource: string;
  details: string;
  ip_address: string;
  timestamp: string;
}

export const AuditLog: React.FC = () => {
  const [events, setEvents] = useState<AuditEvent[]>([]);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [filters, setFilters] = useState({
    user: '',
    action: '',
    resource: '',
    dateRange: [null, null] as [Date | null, Date | null],
  });

  useEffect(() => {
    loadAuditEvents();
  }, [page, rowsPerPage, filters]);

  const loadAuditEvents = async () => {
    try {
      const response = await api.get('/admin/audit', {
        params: {
          page,
          limit: rowsPerPage,
          ...filters,
        },
      });
      setEvents(response.data.events);
    } catch (error) {
      console.error('Error loading audit events:', error);
    }
  };

  const getActionColor = (action: string) => {
    switch (action) {
      case 'create':
        return 'success';
      case 'update':
        return 'info';
      case 'delete':
        return 'error';
      default:
        return 'default';
    }
  };

  return (
    <Paper sx={{ p: 2 }}>
      <Box sx={{ mb: 2, display: 'flex', gap: 2 }}>
        <TextField
          label="User"
          size="small"
          value={filters.user}
          onChange={(e) => setFilters({ ...filters, user: e.target.value })}
        />
        <TextField
          label="Action"
          size="small"
          value={filters.action}
          onChange={(e) => setFilters({ ...filters, action: e.target.value })}
        />
        <TextField
          label="Resource"
          size="small"
          value={filters.resource}
          onChange={(e) => setFilters({ ...filters, resource: e.target.value })}
        />
      </Box>

      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Timestamp</TableCell>
              <TableCell>User</TableCell>
              <TableCell>Action</TableCell>
              <TableCell>Resource</TableCell>
              <TableCell>IP Address</TableCell>
              <TableCell>Details</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {events.map((event) => (
              <TableRow key={event.id}>
                <TableCell>
                  {format(new Date(event.timestamp), 'dd/MM/yyyy HH:mm:ss')}
                </TableCell>
                <TableCell>{event.user}</TableCell>
                <TableCell>
                  <Chip
                    label={event.action}
                    size="small"
                    color={getActionColor(event.action)}
                  />
                </TableCell>
                <TableCell>{event.resource}</TableCell>
                <TableCell>{event.ip_address}</TableCell>
                <TableCell>
                  <Tooltip title={event.details}>
                    <IconButton size="small">
                      <InfoIcon />
                    </IconButton>
                  </Tooltip>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <TablePagination
        component="div"
        count={-1}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={(_, newPage) => setPage(newPage)}
        onRowsPerPageChange={(e) => {
          setRowsPerPage(parseInt(e.target.value, 10));
          setPage(0);
        }}
      />
    </Paper>
  );
};
