import pool from '../config/database';
import { Category } from '../types';

export class CategoryModel {
  /**
   * Cria uma nova categoria
   * @param categoryData Dados da categoria
   */
  static async create(categoryData: Partial<Category>): Promise<Category> {
    const query = `
      INSERT INTO categories (
        name, description, color, parent_id, created_by
      )
      VALUES ($1, $2, $3, $4, $5)
      RETURNING *
    `;
    
    const result = await pool.query(query, [
      categoryData.name,
      categoryData.description,
      categoryData.color || '#1976D2',
      categoryData.parent_id,
      categoryData.created_by
    ]);
    
    return result.rows[0];
  }

  /**
   * Busca todas as categorias com hierarquia
   */
  static async findAll(): Promise<Category[]> {
    const query = `
      WITH RECURSIVE category_tree AS (
        -- Categorias base (sem pai)
        SELECT 
          c.*,
          0 as level,
          c.id::text as path
        FROM categories c
        WHERE parent_id IS NULL
        
        UNION ALL
        
        -- Categorias filhas
        SELECT 
          c.*,
          ct.level + 1,
          ct.path || '.' || c.id::text
        FROM categories c
        JOIN category_tree ct ON c.parent_id = ct.id
      )
      SELECT * FROM category_tree
      ORDER BY path
    `;
    
    const result = await pool.query(query);
    return result.rows;
  }

  /**
   * Atualiza uma categoria
   * @param id ID da categoria
   * @param categoryData Dados a serem atualizados
   */
  static async update(id: number, categoryData: Partial<Category>): Promise<Category> {
    const fields = Object.keys(categoryData)
      .filter(key => categoryData[key] !== undefined)
      .map((key, index) => `${key} = $${index + 2}`);
    
    const values = Object.values(categoryData).filter(value => value !== undefined);
    
    const query = `
      UPDATE categories
      SET ${fields.join(', ')}, updated_at = CURRENT_TIMESTAMP
      WHERE id = $1
      RETURNING *
    `;
    
    const result = await pool.query(query, [id, ...values]);
    return result.rows[0];
  }

  /**
   * Deleta uma categoria e suas subcategorias
   * @param id ID da categoria
   */
  static async delete(id: number): Promise<void> {
    // Primeiro, verifica se existem documentos
    const checkQuery = `
      SELECT COUNT(*) FROM documents
      WHERE category_id = $1 OR category_id IN (
        SELECT id FROM categories WHERE parent_id = $1
      )
    `;
    
    const checkResult = await pool.query(checkQuery, [id]);
    if (checkResult.rows[0].count > 0) {
      throw new Error('Cannot delete category with associated documents');
    }
    
    // Deleta subcategorias primeiro
    await pool.query('DELETE FROM categories WHERE parent_id = $1', [id]);
    
    // Deleta a categoria
    await pool.query('DELETE FROM categories WHERE id = $1', [id]);
  }
}
