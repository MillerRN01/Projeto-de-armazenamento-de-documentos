import { Request, Response } from 'express';
import { DocumentModel } from '../models/Document';
import { OCRService } from '../services/ocrService';
import { WebSocketService } from '../services/websocketService';
import { config } from '../config/environment';

export class DocumentController {
  /**
   * Upload de novo documento
   */
  static async upload(req: Request, res: Response) {
    try {
      if (!req.file) {
        return res.status(400).json({ message: 'No file uploaded' });
      }

      // Processa OCR se for imagem ou PDF
      let ocrMetadata = {};
      if (['image/jpeg', 'image/png', 'application/pdf'].includes(req.file.mimetype)) {
        const ocrResult = await OCRService.processDocument(req.file.path);
        ocrMetadata = {
          ocr_text: ocrResult.text,
          ...ocrResult.metadata
        };
      }

      // Cria o documento
      const document = await DocumentModel.create({
        ...req.body,
        created_by: req.user.id,
        metadata: {
          ...req.body.metadata,
          ...ocrMetadata,
          fileSize: req.file.size,
          mimeType: req.file.mimetype
        }
      }, req.file);

      // Notifica outros usuários
      WebSocketService.notifyDocumentCreated(document);

      res.status(201).json(document);
    } catch (error) {
      console.error('Error uploading document:', error);
      res.status(500).json({ message: 'Error uploading document' });
    }
  }

  /**
   * Busca documento por ID
   */
  static async getById(req: Request, res: Response) {
    try {
      const document = await DocumentModel.findById(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: 'Document not found' });
      }

      res.json(document);
    } catch (error) {
      console.error('Error fetching document:', error);
      res.status(500).json({ message: 'Error fetching document' });
    }
  }

  /**
   * Busca documentos com filtros
   */
  static async search(req: Request, res: Response) {
    try {
      const documents = await DocumentModel.search(req.query);
      res.json(documents);
    } catch (error) {
      console.error('Error searching documents:', error);
      res.status(500).json({ message: 'Error searching documents' });
    }
  }

  /**
   * Atualiza documento
   */
  static async update(req: Request, res: Response) {
    try {
      const document = await DocumentModel.update(
        parseInt(req.params.id),
        req.body
      );

      if (!document) {
        return res.status(404).json({ message: 'Document not found' });
      }

      // Notifica outros usuários
      WebSocketService.notifyDocumentUpdated(document);

      res.json(document);
    } catch (error) {
      console.error('Error updating document:', error);
      res.status(500).json({ message: 'Error updating document' });
    }
  }

  /**
   * Deleta documento
   */
  static async delete(req: Request, res: Response) {
    try {
      await DocumentModel.delete(parseInt(req.params.id));
      
      // Notifica outros usuários
      WebSocketService.notifyDocumentDeleted(parseInt(req.params.id));

      res.status(204).send();
    } catch (error) {
      console.error('Error deleting document:', error);
      res.status(500).json({ message: 'Error deleting document' });
    }
  }
}
